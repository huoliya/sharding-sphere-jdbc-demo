spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: sharding-sphere-jdbc-demo
  datasource:
    dynamic:
      # 指定默认数据源名称
      primary: tour
      strict: false
      datasource:
        mysql:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://192.168.0.230:3306/alarm-base?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&useJDBCCompliantTimezoneShift=true
          username: root
          password: buctGCTCWork@
        starrocks:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://192.168.0.13:9030/alarmdata?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&useJDBCCompliantTimezoneShift=true
          username: root
          password:
  shardingsphere:
    datasource:
      names: m1
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.0.230:3306/alarm-test?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&useJDBCCompliantTimezoneShift=true
        username: root
        password: buctGCTCWork@
    rules:
      sharding:
        key-generators:
          snowflake:
            type: SNOWFLAKE
        sharding-algorithms:
          ota-strategy-inline:
            type: CLASS_BASED
            props:
              algorithmClassName: com.sinocontrol.sharding.sphere.jdbc.demo.config.sharding.TimeShardingAlgorithm
              # 分片算法表达式
              strategy: standard
        tables:
          # insp_mes_model 逻辑表名
          alarm:
            # 数据节点：数据源$->{0..N}.逻辑表名$->{0..N}
            actual-data-nodes: m1.alarm_$->{2023010100..2023123123}
            key-generate-strategy:
              # 分布式序列策略
              column: id
              # 自增列名称，缺省表示不使用自增主键生成器
              keygenerator-name: snowflake
              # 分布式序列算法名称
            # 拆分表策略，也就是什么样子的数据放入放到哪个数据表中。
            table-strategy:
              standard:
                sharding-column: time
                # 分片字段（分片键）
                sharding-algorithm-name: ota-strategy-inline
                # 分片算法名称
    props:
      sql-show: false
  main:
    allow-bean-definition-overriding: true

server:
  port: 12800
customize:
  mapper-scan: com.sinocontrol.sharding.sphere.jdbc.demo.mapper